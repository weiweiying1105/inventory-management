// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id Int @id @default(autoincrement())
  email  String @unique
  phone  String? @unique
  ceatedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password String
  role String?
}


model Products {
  productId   Int         @id @default(autoincrement())
  name        String
  price       Float       // 建议价格
  rating      Float?
  image       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  skus        Sku[]
  specGroups  SpecGroup[]
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  sales       Sales[]
  purchases   Purchases[]
}

// 规格选项组（如颜色、尺寸等）
model SpecGroup {
  id        Int         @id @default(autoincrement())
  name      String      // 规格组名称，如"颜色"
  productId Int
  product   Products    @relation(fields: [productId], references: [productId])
  values    SpecValue[] // 规格值，如"红色"、"蓝色"
}

// 规格值
model SpecValue {
  id          Int       @id @default(autoincrement())
  value       String    // 具体的规格值
  groupId     Int
  group       SpecGroup @relation(fields: [groupId], references: [id])
  skus        Sku[]     // 关联的SKU
}

// SKU表（删除重复的定义，保留这一个）
model Sku {
  id            Int         @id @default(autoincrement())
  productId     Int
  product       Products    @relation(fields: [productId], references: [productId])
  specValues    SpecValue[] // 规格值组合
  price         Float       // SKU价格
  stock         Int         // 库存
  code          String?     // SKU编码
  isDefault     Boolean     @default(false) // 是否为默认SKU
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// 产品分类
model Category {
  id  Int @id @default(autoincrement())
  categoryName String
  products  Products[] // 一个类别下有多个产品，一对多的关系
}
model Sales {
  id          Int      @id @default(autoincrement())
  saleId      String   @unique
  productId   Int
  timestamp   DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  product     Products @relation(fields: [productId], references: [productId]) // 更新引用
}

model Purchases {
  id          Int      @id @default(autoincrement())
  purchaseId  String   @unique
  productId   Int
  timestamp   DateTime
  quantity    Int
  unitCost    Float
  totalCost   Float
  product     Products @relation(fields: [productId], references: [productId]) // 更新引用
}

model Expenses {
  expenseId String   @id
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @id
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @id
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}

model Pictures {
  id Int @id @default(autoincrement())
  url String
  name String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Customers {
  id Int @id @default(autoincrement())
  openid String @unique
  session_key String? 
  phone  String? @unique
  avatarUrl String?
  nickName String?
  gender Int?
  country     String?  // 国家
  province    String?  // 省份
  city        String?  // 城市
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime @default(now()) // 最后登录时间
}