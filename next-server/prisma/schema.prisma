generator client {
  provider = "prisma-client-js"
}

enum AddressStatus {
  DEFAULT
  NORMAL
}

enum OrderStatus {
  PENDING // 待处理
  PROCESSING // 处理中
  SHIPPED // 已发货
  DELIVERED // 已送达
  CANCELLED // 已取消
  UNPAID // 待支付
  TO_BE_SHIPPED // 待发货
  TO_BE_RECEIVED // 待收货
  TO_BE_REVIEWED // 待评价
  AFTER_SALE // 售后
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PROD")
}

model Users {
  email     String   @unique
  ceatedAt  DateTime @default(now())
  id        Int      @id @default(autoincrement())
  password  String
  phone     String?  @unique
  role      String?
  updatedAt DateTime @updatedAt
}

model SpecGroup {
  id        Int         @id @default(autoincrement())
  name      String
  productId Int
  product   Products    @relation(fields: [productId], references: [productId], onDelete: Cascade) // 添加级联删除
  values    SpecValue[]
  sort      Int         @default(0) // 添加排序字段

  @@index([productId])
}

model SpecValue {
  id      Int       @id @default(autoincrement())
  value   String
  groupId Int
  group   SpecGroup @relation(fields: [groupId], references: [id], onDelete: Cascade) // 添加级联删除
  skus    Sku[]     @relation("SkuToSpecValue")
  sort    Int       @default(0) // 添加排序字段

  @@index([groupId])
}

model Category {
  id              Int        @id @default(autoincrement())
  categoryName    String
  description     String?
  parentId        Int?
  subCategoryName String?
  parent          Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subCategory     Category[] @relation("CategoryHierarchy")
  products        Products[]
  thumbnail       String?    // 分类缩略图
}

model Sales {
  saleId      String   @unique
  timestamp   DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  productId   Int
  id          Int      @id @default(autoincrement())
  product     Products @relation(fields: [productId], references: [productId])
}

model Purchases {
  purchaseId String   @unique
  timestamp  DateTime
  quantity   Int
  unitCost   Float
  totalCost  Float
  productId  Int
  id         Int      @id @default(autoincrement())
  product    Products @relation(fields: [productId], references: [productId])
}

model Expenses {
  expenseId String   @id
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @id
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model Products {
  name          String
  rating        Float?
  images        String[] // Changed from image String? to images String[]
  thumb         String?  // 主图
  productId     Int         @id @default(autoincrement())
  categoryId    Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  description   String?
  isHot         Boolean?    @default(false)
  isNew         Boolean?    @default(false)
  isPopular     Boolean?    @default(false)
  isRecommend   Boolean?    @default(false)
  storageMethod String?
  tags           String[]    // 产品标签
  category      Category?   @relation(fields: [categoryId], references: [id])
  purchases     Purchases[]
  sales         Sales[]
  skus          Sku[]
  specGroups    SpecGroup[]
  OrderItem     OrderItem[]
}

model Sku {
  id                 Int         @id @default(autoincrement())
  productId          Int
  stock              Int
  code               String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  isDefault          Boolean     @default(false)
  memberPrice        Float?
  dimensions         String?
  retailPrice        Float
  weight             Float?
  wholesalePDateTime DateTime?
  wholesalePrice     Float?
  unit               String?
  product            Products    @relation(fields: [productId], references: [productId], onDelete: Cascade)
  specValues         SpecValue[] @relation("SkuToSpecValue")
  OrderItem          OrderItem[]
  carts              Cart[]      @relation("SkuToCart")
}



model PurchaseSummary {
  purchaseSummaryId String   @id
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}

model Pictures {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
}

model Customers {
  id          Int       @id @default(autoincrement())
  openid      String    @unique
  phone       String?   @unique
  avatarUrl   String?
  nickName    String?
  gender      Int?
  country     String?
  province    String?
  city        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime  @default(now())
  session_key String?
  Order       Order[]
  Address     Address[]

  @@unique([id, openid])
}

model Banner {
  id        Int      @id @default(autoincrement())
  title     String?
  image     String
  link      String?
  sort      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}

model Order {
  id         Int         @id @default(autoincrement())
  orderId    String      @unique
  customerId Int
  openid     String      @unique
  customer   Customers   @relation(fields: [customerId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     OrderStatus @default(PENDING)
  items      OrderItem[]

  @@index([customerId]) // 添加索引
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  productId  Int
  product    Products @relation(fields: [productId], references: [productId])
  skuId      Int
  sku        Sku      @relation(fields: [skuId], references: [id])
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  price      Float
  totalPrice Float    @default(0)
}

model Address {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        Customers @relation(fields: [userId], references: [id])
  contactName String
  phone       String
  province    String
  city        String
  district    String
  detail      String
  postalCode  String?
  status      String    @default("normal") // "default"表示默认地址
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model Cart {
  id         Int      @id @default(autoincrement())
  openid     String  
  skuId      Int
  sku        Sku      @relation("SkuToCart", fields: [skuId], references: [id])
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([openid])
  @@index([skuId])
  @@unique([openid, skuId]) // 一个 openid 同一 SKU 只允许一条购物车记录
}
